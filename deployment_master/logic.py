# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import logging
import uuid
from common.constant import REPLICATON_FACTOR
from common.db.db_analyzer import DatabaseAnalyzer
from common.db.db_util import SQLalchemyUtil
from common.models import MigrationJob
from deployment_advisor import DeploymentAdvisor
from deployment_master.action.mppdb_creation import MPPDBCreation
from deployment_master.action.tenant_mppdb_group_creation import TenantMPPDBGroupCreation
from deployment_master.models import MigrationPlan
from tests.deployment_master.mppdb_insert_db_for_testing import TestingUtil


class DeploymentMaster:
    """
    Migrate data based on the deployment plan generated by Deployment Advisor.
    """

    def __init__(self):

        self.database_analyzer = DatabaseAnalyzer('consolidation')
        self.deployment_advisor = DeploymentAdvisor()
        self.logger = logging.getLogger(__name__)

    def compare_tenant_mppdb_group_lists(self, current_tenant_mppdb_group_list, new_tenant_mppdb_group_list):
        """
        Compare current TenantMPPDBGroups and new TenantMPPDBGroups and find out the following categories.
            existing_tenant_mppdb_group_list: TenantMPPDBGroups that is not only a current TenantMPPDBGroup but also in the deployment plan
            newly_created_tenant_mppdb_group_list: TenantMPPDBGroups that is in the deployment plan but not a current TenantMPPDBGroup
            discarded_tenant_mppdb_group_list: TenantMPPDBGroups that is a current TenantMPPDGroup but not in the deployment plan
        """

        existing_tenant_mppdb_group_list = []
        newly_created_tenant_mppdb_group_list = []
        discarded_tenant_mppdb_group_list = []

        for new_tenant_mppdb_group in new_tenant_mppdb_group_list:
            if new_tenant_mppdb_group.tenant_mppdb_group_id in [current_tenant_mppdb_group.tenant_mppdb_group_id for
                                                                current_tenant_mppdb_group in
                                                                current_tenant_mppdb_group_list]:
                existing_tenant_mppdb_group_list.append(new_tenant_mppdb_group)
            else:
                newly_created_tenant_mppdb_group_list.append(new_tenant_mppdb_group)
        for current_tenant_mppdb_group in current_tenant_mppdb_group_list:
            if current_tenant_mppdb_group.tenant_mppdb_group_id not in [tenant_mppdb_group.tenant_mppdb_group_id for
                                                                        tenant_mppdb_group in
                                                                        existing_tenant_mppdb_group_list]:
                discarded_tenant_mppdb_group_list.append(current_tenant_mppdb_group)
        logging.info('Current tenant MPPDB groups: %s' % str(current_tenant_mppdb_group_list))
        logging.info('New tenant MPPDB groups: %s' % str(new_tenant_mppdb_group_list))
        logging.info('When comparing new and current tenant MPPDB groups, find existing tenant MPPDB groups: %s' % str(
            existing_tenant_mppdb_group_list))
        logging.info(
            'When comparing new and current tenant MPPDB groups, find newly created tenant MPPDB groups: %s' % str(
                newly_created_tenant_mppdb_group_list))
        logging.info('When comparing new and current tenant MPPDB groups, find discarded tenant MPPDB groups: %s' % str(
            discarded_tenant_mppdb_group_list))
        return existing_tenant_mppdb_group_list, newly_created_tenant_mppdb_group_list, discarded_tenant_mppdb_group_list

    def find_new_tenant_mppdbs_to_deploy(self, new_tenant_mppdb_group, current_tenant_mppdb_group):
        """Find out TenantMPPDBs to be migrated."""
        new_tenant_mppdb_list = []
        for tenant_mppdb in new_tenant_mppdb_group.tenant_mppdb_members_list:
            if tenant_mppdb.tenant_mppdb_id not in [current_tenant_mppdb.tenant_mppdb_id for current_tenant_mppdb in
                                                    current_tenant_mppdb_group.tenant_mppdb_members_list]:
                new_tenant_mppdb_list.append(tenant_mppdb)
        return new_tenant_mppdb_list

    def find_source_tenant_mppdb_group_by_tenant_mppdb(self, current_tenant_mppdb_group_list, tenant_mppdb):
        """Find out TenantMPPDBGroup which a TenantMPPDB belongs to."""
        tenant_mppdb_group = None
        tenant_mppdb_id = tenant_mppdb.tenant_mppdb_id
        for current_tenant_mppdb_group in current_tenant_mppdb_group_list:
            if tenant_mppdb_id in [tenant_mppdb.tenant_mppdb_id for tenant_mppdb in
                                   current_tenant_mppdb_group.tenant_mppdb_members_list]:
                tenant_mppdb_group = current_tenant_mppdb_group
        return tenant_mppdb_group

    def find_dest_tenant_mppdb_group_by_tenant_mppdb(self, new_tenant_mppdb_group_list, tenant_mppdb):
        tenant_mppdb_group = None
        tenant_mppdb_id = tenant_mppdb.tenant_mppdb_id
        for new_tenant_mppdb_group in new_tenant_mppdb_group_list:
            if tenant_mppdb_id in [tenant_mppdb.tenant_mppdb_id for tenant_mppdb in
                                   new_tenant_mppdb_group.tenant_mppdb_members_list]:
                tenant_mppdb_group = new_tenant_mppdb_group
        return tenant_mppdb_group

    def find_tenant_mppdb_group_by_tenant_mppdb(self, current_tenant_mppdb_group_list, tenant_mppdb):
        tenant_mppdb_group = None
        tenant_mppdb_id = tenant_mppdb.tenant_mppdb_id
        for current_tenant_mppdb_group in current_tenant_mppdb_group_list:
            if tenant_mppdb_id in [tenant_mppdb.tenant_mppdb_id for tenant_mppdb in
                                   current_tenant_mppdb_group.tenant_mppdb_members_list]:
                tenant_mppdb_group = current_tenant_mppdb_group
        return tenant_mppdb_group

    def generate_migration_plan(self, current_tenant_mppdb_group_list, new_tenant_mppdb_group_list):
        """
            Generate a list of migration actions.
                For TenantMPPDBGroup in newly_created_tenant_mppdb_group_list:
                    - create MPPDBs to serve it
                    - migrate data of TenantMPPDBs that belong to this group
                For TenantMPPDBGroup whose number of MPPDBs belonging to TenantMPPDBGroup is less than replication factor
                    - copy corresponding MPPDBs to serve it
                Move a TenantMPPDB's data if this TenantMPPDB is consolidated to a different TenantMPPDGroup.
                Update the backend database with new TenantMPPDBGroup info once migration tasks are done.
                Delete a TenantMPPDB's data on its old MPPDB if it has been migrated to a different one.
                Delete a MPPDB if it is not used any more.
        """
        global_action_list = []
        existing_tenant_mppdb_group_list, newly_created_tenant_mppdb_group_list, discarded_tenant_mppdb_group_list = self.compare_tenant_mppdb_group_lists(
            current_tenant_mppdb_group_list, new_tenant_mppdb_group_list)
        for newly_created_tenant_mppdb_group in newly_created_tenant_mppdb_group_list:

            action_tenant_mppdb_group_create = TenantMPPDBGroupCreation(newly_created_tenant_mppdb_group)
            global_action_list.append(action_tenant_mppdb_group_create)

            mppdb_quantity_to_create = min(REPLICATON_FACTOR,
                                           len(newly_created_tenant_mppdb_group.tenant_mppdb_members_list))
            action_create = MPPDBCreation(action=MigrationJob._tenant_mppdb_data_movement, dest_tenant_mppdb_group=newly_created_tenant_mppdb_group,
                                          mppdb_quantity_to_create=mppdb_quantity_to_create)
            global_action_list.append(action_create)

            for tenant_mppdb in newly_created_tenant_mppdb_group.tenant_mppdb_members_list:
                source_current_tenant_mppdb_group = self.find_tenant_mppdb_group_by_tenant_mppdb(
                    current_tenant_mppdb_group_list, tenant_mppdb)
                tenant_mppdb_data_movement_uuid = uuid.uuid4()
                action_list = []

                for movement_times in range(0, mppdb_quantity_to_create):
                    action = MigrationJob(action=MigrationJob._tenant_mppdb_data_movement,
                                          source_mppdb_id=source_current_tenant_mppdb_group.mppdb_list[0].mppdb_id,
                                          dest_mppdb_id=None, tenant_mppdb_id=tenant_mppdb.tenant_mppdb_id,
                                          changes_id=tenant_mppdb_data_movement_uuid)
                    global_action_list.append(action)
                    action_list.append(action)

                action_create.addAction(tenant_mppdb_data_movement_uuid, action_list)

        #2
        for new_tenant_mppdb_group in existing_tenant_mppdb_group_list:

            if len(new_tenant_mppdb_group.mppdb_list) < REPLICATON_FACTOR and len(new_tenant_mppdb_group.mppdb_list) < len(new_tenant_mppdb_group.tenant_mppdb_members_list):
                diff = min(REPLICATON_FACTOR, len(new_tenant_mppdb_group.tenant_mppdb_members_list)) - len(new_tenant_mppdb_group.mppdb_list)

                source_mppdb = new_tenant_mppdb_group.mppdb_list[0]

                action_create = MPPDBCreation(action=MigrationJob._mppdb_copy, dest_tenant_mppdb_group=new_tenant_mppdb_group, mppdb_quantity_to_create=diff)
                global_action_list.append(action_create)

                for tenant_mppdb in new_tenant_mppdb_group.tenant_mppdb_members_list:
                    mppdb_copy_uuid = uuid.uuid4()
                    action_list = []
                    for movement_times in range(0, diff):
                        action = MigrationJob(action=MigrationJob._mppdb_copy, source_mppdb_id=source_mppdb.mppdb_id,dest_mppdb_id=None, tenant_mppdb_id=tenant_mppdb.tenant_mppdb_id,changes_id=mppdb_copy_uuid)
                        global_action_list.append(action)
                        action_list.append(action)
                    action_create.addAction(mppdb_copy_uuid, action_list)

        #3
        for new_tenant_mppdb_group in existing_tenant_mppdb_group_list:
            for current_tenant_mppdb_group in current_tenant_mppdb_group_list:
                if new_tenant_mppdb_group.tenant_mppdb_group_id == current_tenant_mppdb_group.tenant_mppdb_group_id:
                    new_tenant_mppdb_list = self.find_new_tenant_mppdbs_to_deploy(new_tenant_mppdb_group, current_tenant_mppdb_group)
                    for tenant_mppdb in new_tenant_mppdb_list:
                        tenant_mppdb_data_movement_uuid = uuid.uuid4()
                        for source_current_tenant_mppdb_group in current_tenant_mppdb_group_list:
                            if tenant_mppdb.tenant_mppdb_id in [current_tenant_mppdb.tenant_mppdb_id for current_tenant_mppdb in source_current_tenant_mppdb_group.tenant_mppdb_members_list]:
                                for dest_mppdb in new_tenant_mppdb_group.mppdb_list:
                                    global_action_list.append(
                                        MigrationJob(action=MigrationJob._tenant_mppdb_data_movement,
                                                     source_mppdb_id=source_current_tenant_mppdb_group.mppdb_list[0].mppdb_id,
                                                     dest_mppdb_id=dest_mppdb.mppdb_id,
                                                     tenant_mppdb_id=tenant_mppdb.tenant_mppdb_id,
                                                     changes_id=tenant_mppdb_data_movement_uuid))

        logging.info('Generate migrate actions: %s' % str(global_action_list))

        return MigrationPlan(global_action_list)

    def detect_copy_move_order_confliction(self, actions):
        action_dict = {}
        new_actions = []

        # Put the action into the hash table
        for action in actions:
            if isinstance(action, MigrationJob):
                if action.action == MigrationJob._mppdb_copy:
                    # key exists
                    if action_dict.get(str(action.tenant_mppdb_id) + "," + action.source_mppdb_id) is not None:
                        action_list = action_dict.get(str(action.tenant_mppdb_id) + "," + action.source_mppdb_id)
                        action_list.append(action)
                    else:
                        action_list = []
                        action_list.append(action)
                        action_dict[str(action.tenant_mppdb_id) + "," + action.source_mppdb_id] = action_list

                elif action.action == MigrationJob._tenant_mppdb_data_movement:
                    # key exists
                    if action_dict.get(str(action.tenant_mppdb_id) + "," + action.dest_mppdb_id) is not None:
                        action_list = action_dict.get(str(action.tenant_mppdb_id) + "," + action.dest_mppdb_id)
                        action_list.append(action)
                    else:
                        action_list = []
                        action_list.append(action)
                        action_dict[str(action.tenant_mppdb_id) + "," + action.dest_mppdb_id] = action_list
            else:
                new_actions.append(action)

        # Find out the actions that needed to be modified
        for key_actions in action_dict.values():
            mppdb_copy = False
            tenant_mppdb_data_movement = False
            source_mppdb_id = ''
            changes_id = ''

            if len(key_actions) > 1:
                for key_action in key_actions:
                    if key_action.action == MigrationJob._mppdb_copy:
                        mppdb_copy = True
                    elif key_action.action == MigrationJob._tenant_mppdb_data_movement:
                        tenant_mppdb_data_movement = True
                        source_mppdb_id = key_action.source_mppdb_id
                        changes_id = key_action.changes_id
                if mppdb_copy == True and tenant_mppdb_data_movement == True:
                    for key_action in key_actions:
                        # modify all the 'mppdb_copy' action type to 'tenant_mppdb_data_movement',
                        # changes_id to 'tenant_mppdb_data_movement' action's changes_id since the tenant_mppdb_data need to move to 2 mppdb(192.168.1.210 and 205 from 220, so data in 220 should not be removed until all the tenant_mppdb_data is moved)
                        # source_mppdb_id to 'tenant_mppdb_data_movement' action's source_mppdb_id
                        if key_action.action == MigrationJob._mppdb_copy:
                            key_action.action = MigrationJob._tenant_mppdb_data_movement
                            key_action.source_mppdb_id = source_mppdb_id
                            key_action.changes_id = changes_id

            for key_action in key_actions:
                new_actions.append(key_action)

        return new_actions

    def execute_migration_plan(self, session, migration_plan, test_case=None):
        """Execute the list of migration actions."""

        # get CreateMPPDB action to execute first
        # TODO: now is blocking but we can improve it later

        for action in migration_plan.getMppdbCreations():
            action.run(session, test_case)

        # For testing
        if test_case is not None:
            TestingUtil.insertMPPDB(test_case)

        for action in migration_plan.getTenantMppdbGroupCreations():
            action.run(session)

        # handle the same tenant mppdb with the order problem between copy(same source host ip) and move action(same destination host ip)
        actions = self.detect_copy_move_order_confliction(migration_plan.actions)
        migration_plan.actions = actions
        # get Move and Copy and call to add them to db job Queue
        for action in migration_plan.getCopyAndMoveMPPDBAction():
            action.run(session)
        return

    def redeploy(self, test_case=None):
        """Trigger migration process"""
        session = SQLalchemyUtil.get_session()
        try:
            logging.info('Start to consolidate and redeploy all tenant mppdbs.')

            current_tenant_mppdb_group_list = self.database_analyzer.get_current_tenant_mppdb_group_list()
            new_tenant_mppdb_group_list = self.deployment_advisor.generate_deployment_plan()

            migration_plan = self.generate_migration_plan(current_tenant_mppdb_group_list, new_tenant_mppdb_group_list)

            self.execute_migration_plan(session, migration_plan, test_case)

        except:
            self.logger.exception("Fail to redeploy")
        finally:
            session.close()